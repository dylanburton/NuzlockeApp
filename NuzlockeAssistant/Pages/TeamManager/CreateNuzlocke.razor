@page "/newtrainer"
@page "/createnuzlocke"
@page "/createjourney"

@using NuzlockeAssistant.Models;
@using DataLibrary;

@inject IDataAccess _data;
@inject IConfiguration _config;
@inject IJSRuntime JSRuntime;


<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Create Journey</title>

</head>
<body>
    <style>
        body{
            background-color: transparent;
        }
        .input-container {
            width: 400px;
            max-width: 100%;
            position: relative;
        }
        
        .input-container input {
            background: rgba(255,255,255,0);
            border: 2px solid White;
            border-radius: 50px;
            padding: 1rem 2rem;
            width: 100%;
        }

        .input-container button {
            background-color:darkturquoise;
            
            border-radius: 50%;
            height: 60%;
            aspect-ratio: 1;

            position: absolute;
            right: 2%;
            top: 35%;

        }
    </style>

    <h3>Start a Journey?</h3>
    <div class="input-container">
        <label for="name"></label>
        <input type="text" placeholder="What is your name for this journey?" class="form-control" @bind="runName" />
        <button type="submit" @onclick="CreateANuzlocke">Start</button>
    </div>
    @if (longerThanTen)
    {
        <font color="red">The name has to be less than 11 characters</font>
    }
</body>


@code {
    string runName = "";
    string teamsConnectionString = "teamsConnection";
    bool longerThanTen = false;
    /**
     * 
     */
    private async Task CreateANuzlocke()
    {
        if(runName.Length > 10)
        {
            longerThanTen = true;
            Console.WriteLine("Name for nuzolocke too long");
        }
        Console.WriteLine("creating a nuzlocke");
        if (!string.IsNullOrEmpty(runName) && !(runName.Contains(";")) && runName.Length < 11){
            try{
                longerThanTen = false;
                string sql = "Insert into trainer(name, generation, alive) values (@newName, 1, 1);";
                await _data.SaveData(sql, new { newName = runName }, _config.GetConnectionString(teamsConnectionString));
                await JSRuntime.InvokeVoidAsync("location.reload");
            } catch(Exception ex)
            {
                Console.WriteLine("Actually not making nuzlocke, here is why: " + ex.Message);
            }
            runName = string.Empty;
        }
    }
}

<RunSelection></RunSelection>